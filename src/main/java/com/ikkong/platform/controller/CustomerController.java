package com.ikkong.platform.controller;

import java.util.Map;
import com.ikkong.core.base.BaseController;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.platform.utils.MD5utils;
import com.ikkong.platform.utils.MyDateUtil;
import com.ikkong.system.controller.base.UrlPermissController;
import com.ikkong.platform.model.Customer;
import com.ikkong.platform.service.CustomerService;
import com.ikkong.platform.service.impl.CustomerServiceImpl;

/**
 * Generated by Blade.
 * 2017-11-22 14:55:28
 */
public class CustomerController extends UrlPermissController {
	private static String CODE = "customer";
	private static String PERFIX = "customer";
	private static String LIST_SOURCE = "Customer.list";
	private static String BASE_PATH = "/platform/customer/";
	
	CustomerService service = new CustomerServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "customer.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "customer_add.html");
	}

	public void edit() {
		String id = getPara(0);
		Customer customer = service.findById(id);
		setAttr("model", JsonKit.toJson(customer));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "customer_edit.html");
	}

	public void view() {
		String id = getPara(0);
		Customer customer = service.findById(id);
		setAttr("model", JsonKit.toJson(customer));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "customer_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

	public void save() {
		Customer customer = mapping(PERFIX, Customer.class);
		customer.setPassword(MD5utils.getMd5(customer.getPassword()));
		customer.setCreate_time(MyDateUtil.getNowDate());
		customer.setUpdate_time(MyDateUtil.getNowDate());
		boolean temp = service.save(customer);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		Customer customer = mapping(PERFIX, Customer.class);
		customer.setUpdate_time(MyDateUtil.getNowDate());
//		customer.setVersion(customer.getVersion()+1);
		boolean temp = service.update(customer);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
